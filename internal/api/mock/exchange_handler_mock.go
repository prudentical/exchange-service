// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/exchange_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/exchange_handler.go -destination=internal/api/mock/exchange_handler_mock.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeHandler is a mock of ExchangeHandler interface.
type MockExchangeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeHandlerMockRecorder
}

// MockExchangeHandlerMockRecorder is the mock recorder for MockExchangeHandler.
type MockExchangeHandlerMockRecorder struct {
	mock *MockExchangeHandler
}

// NewMockExchangeHandler creates a new mock instance.
func NewMockExchangeHandler(ctrl *gomock.Controller) *MockExchangeHandler {
	mock := &MockExchangeHandler{ctrl: ctrl}
	mock.recorder = &MockExchangeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeHandler) EXPECT() *MockExchangeHandlerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockExchangeHandler) GetAll(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExchangeHandlerMockRecorder) GetAll(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExchangeHandler)(nil).GetAll), c)
}

// GetById mocks base method.
func (m *MockExchangeHandler) GetById(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockExchangeHandlerMockRecorder) GetById(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockExchangeHandler)(nil).GetById), c)
}

// HandleRoutes mocks base method.
func (m *MockExchangeHandler) HandleRoutes(e *echo.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoutes", e)
}

// HandleRoutes indicates an expected call of HandleRoutes.
func (mr *MockExchangeHandlerMockRecorder) HandleRoutes(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoutes", reflect.TypeOf((*MockExchangeHandler)(nil).HandleRoutes), e)
}

// Update mocks base method.
func (m *MockExchangeHandler) Update(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExchangeHandlerMockRecorder) Update(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExchangeHandler)(nil).Update), c)
}
