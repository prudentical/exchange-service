// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/currency/currency_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/currency/currency_service.go -destination=internal/service/currency/mock/currency_service_mock.go
//

// Package mock_currency is a generated GoMock package.
package mock_currency

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrencyService) Create(currency model.Currency) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", currency)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyServiceMockRecorder) Create(currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrencyService)(nil).Create), currency)
}

// Delete mocks base method.
func (m *MockCurrencyService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCurrencyServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCurrencyService)(nil).Delete), id)
}

// FindBySymbol mocks base method.
func (m *MockCurrencyService) FindBySymbol(symbol string) ([]model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySymbol", symbol)
	ret0, _ := ret[0].([]model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySymbol indicates an expected call of FindBySymbol.
func (mr *MockCurrencyServiceMockRecorder) FindBySymbol(symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySymbol", reflect.TypeOf((*MockCurrencyService)(nil).FindBySymbol), symbol)
}

// GetAll mocks base method.
func (m *MockCurrencyService) GetAll(page, size int) (persistence.Page[model.Currency], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", page, size)
	ret0, _ := ret[0].(persistence.Page[model.Currency])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCurrencyServiceMockRecorder) GetAll(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCurrencyService)(nil).GetAll), page, size)
}

// GetById mocks base method.
func (m *MockCurrencyService) GetById(id int) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCurrencyServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCurrencyService)(nil).GetById), id)
}

// Merge mocks base method.
func (m *MockCurrencyService) Merge(currencies []model.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", currencies)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockCurrencyServiceMockRecorder) Merge(currencies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockCurrencyService)(nil).Merge), currencies)
}

// Update mocks base method.
func (m *MockCurrencyService) Update(id int, currency model.Currency) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, currency)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCurrencyServiceMockRecorder) Update(id, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCurrencyService)(nil).Update), id, currency)
}
