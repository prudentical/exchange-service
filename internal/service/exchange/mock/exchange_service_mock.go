// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange/exchange_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange/exchange_service.go -destination=internal/service/exchange/mock/exchange_service_mock.go
//

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	sdk "exchange-service/internal/sdk"
	exchange "exchange-service/internal/service/exchange"
	reflect "reflect"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeService is a mock of ExchangeService interface.
type MockExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceMockRecorder
}

// MockExchangeServiceMockRecorder is the mock recorder for MockExchangeService.
type MockExchangeServiceMockRecorder struct {
	mock *MockExchangeService
}

// NewMockExchangeService creates a new mock instance.
func NewMockExchangeService(ctrl *gomock.Controller) *MockExchangeService {
	mock := &MockExchangeService{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeService) EXPECT() *MockExchangeServiceMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockExchangeService) Buy(exchange sdk.ExchangeSDK, request exchange.OrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", exchange, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockExchangeServiceMockRecorder) Buy(exchange, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockExchangeService)(nil).Buy), exchange, request)
}

// Create mocks base method.
func (m *MockExchangeService) Create(exchange model.Exchange) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exchange)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExchangeServiceMockRecorder) Create(exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExchangeService)(nil).Create), exchange)
}

// Delete mocks base method.
func (m *MockExchangeService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExchangeServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExchangeService)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockExchangeService) GetAll() ([]model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExchangeServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExchangeService)(nil).GetAll))
}

// GetAllWithPage mocks base method.
func (m *MockExchangeService) GetAllWithPage(page, size int) (persistence.Page[model.Exchange], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithPage", page, size)
	ret0, _ := ret[0].(persistence.Page[model.Exchange])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithPage indicates an expected call of GetAllWithPage.
func (mr *MockExchangeServiceMockRecorder) GetAllWithPage(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithPage", reflect.TypeOf((*MockExchangeService)(nil).GetAllWithPage), page, size)
}

// GetById mocks base method.
func (m *MockExchangeService) GetById(id int) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockExchangeServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockExchangeService)(nil).GetById), id)
}

// HistoricPrice mocks base method.
func (m *MockExchangeService) HistoricPrice(exchange sdk.ExchangeSDK, request exchange.PriceCheckRequest) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoricPrice", exchange, request)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoricPrice indicates an expected call of HistoricPrice.
func (mr *MockExchangeServiceMockRecorder) HistoricPrice(exchange, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoricPrice", reflect.TypeOf((*MockExchangeService)(nil).HistoricPrice), exchange, request)
}

// PriceFor mocks base method.
func (m *MockExchangeService) PriceFor(exchange sdk.ExchangeSDK, request exchange.PriceCheckRequest) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PriceFor", exchange, request)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PriceFor indicates an expected call of PriceFor.
func (mr *MockExchangeServiceMockRecorder) PriceFor(exchange, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceFor", reflect.TypeOf((*MockExchangeService)(nil).PriceFor), exchange, request)
}

// Sell mocks base method.
func (m *MockExchangeService) Sell(exchange sdk.ExchangeSDK, request exchange.OrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sell", exchange, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sell indicates an expected call of Sell.
func (mr *MockExchangeServiceMockRecorder) Sell(exchange, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockExchangeService)(nil).Sell), exchange, request)
}

// Update mocks base method.
func (m *MockExchangeService) Update(id int, exchange model.Exchange) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, exchange)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExchangeServiceMockRecorder) Update(id, exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExchangeService)(nil).Update), id, exchange)
}
