// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange/order_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange/order_service.go -destination=internal/service/exchange/mock/order_service_mock.go
//

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	sdk "exchange-service/internal/sdk"
	exchange "exchange-service/internal/service/exchange"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// Order mocks base method.
func (m *MockOrderService) Order(exchange sdk.ExchangeAPIClient, pairId int64, request exchange.OrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", exchange, pairId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockOrderServiceMockRecorder) Order(exchange, pairId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockOrderService)(nil).Order), exchange, pairId, request)
}
