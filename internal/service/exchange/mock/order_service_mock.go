// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange/order_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange/order_service.go -destination=internal/service/exchange/mock/order_service_mock.go
//

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	sdk "exchange-service/internal/sdk"
	exchange "exchange-service/internal/service/exchange"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExchangeOrderService is a mock of ExchangeOrderService interface.
type MockExchangeOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeOrderServiceMockRecorder
}

// MockExchangeOrderServiceMockRecorder is the mock recorder for MockExchangeOrderService.
type MockExchangeOrderServiceMockRecorder struct {
	mock *MockExchangeOrderService
}

// NewMockExchangeOrderService creates a new mock instance.
func NewMockExchangeOrderService(ctrl *gomock.Controller) *MockExchangeOrderService {
	mock := &MockExchangeOrderService{ctrl: ctrl}
	mock.recorder = &MockExchangeOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeOrderService) EXPECT() *MockExchangeOrderServiceMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockExchangeOrderService) Buy(exchange sdk.ExchangeSDK, pairId int64, request exchange.OrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", exchange, pairId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockExchangeOrderServiceMockRecorder) Buy(exchange, pairId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockExchangeOrderService)(nil).Buy), exchange, pairId, request)
}

// Sell mocks base method.
func (m *MockExchangeOrderService) Sell(exchange sdk.ExchangeSDK, pairId int64, request exchange.OrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sell", exchange, pairId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sell indicates an expected call of Sell.
func (mr *MockExchangeOrderServiceMockRecorder) Sell(exchange, pairId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sell", reflect.TypeOf((*MockExchangeOrderService)(nil).Sell), exchange, pairId, request)
}
