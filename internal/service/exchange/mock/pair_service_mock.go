// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange/pair_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange/pair_service.go -destination=internal/service/exchange/mock/pair_service_mock.go
//

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPairService is a mock of PairService interface.
type MockPairService struct {
	ctrl     *gomock.Controller
	recorder *MockPairServiceMockRecorder
}

// MockPairServiceMockRecorder is the mock recorder for MockPairService.
type MockPairServiceMockRecorder struct {
	mock *MockPairService
}

// NewMockPairService creates a new mock instance.
func NewMockPairService(ctrl *gomock.Controller) *MockPairService {
	mock := &MockPairService{ctrl: ctrl}
	mock.recorder = &MockPairServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairService) EXPECT() *MockPairServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPairService) Create(exchangeId int64, pair model.Pair) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exchangeId, pair)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPairServiceMockRecorder) Create(exchangeId, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPairService)(nil).Create), exchangeId, pair)
}

// Delete mocks base method.
func (m *MockPairService) Delete(exchangeId, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", exchangeId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPairServiceMockRecorder) Delete(exchangeId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPairService)(nil).Delete), exchangeId, id)
}

// GetAll mocks base method.
func (m *MockPairService) GetAll(exchangeId int64, page, size int) (persistence.Page[model.Pair], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", exchangeId, page, size)
	ret0, _ := ret[0].(persistence.Page[model.Pair])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPairServiceMockRecorder) GetAll(exchangeId, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPairService)(nil).GetAll), exchangeId, page, size)
}

// GetById mocks base method.
func (m *MockPairService) GetById(exchangeId, id int64) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", exchangeId, id)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPairServiceMockRecorder) GetById(exchangeId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPairService)(nil).GetById), exchangeId, id)
}

// Merge mocks base method.
func (m *MockPairService) Merge(paris []model.Pair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", paris)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockPairServiceMockRecorder) Merge(paris any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockPairService)(nil).Merge), paris)
}

// Update mocks base method.
func (m *MockPairService) Update(exchangeId, id int64, pair model.Pair) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", exchangeId, id, pair)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPairServiceMockRecorder) Update(exchangeId, id, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPairService)(nil).Update), exchangeId, id, pair)
}
