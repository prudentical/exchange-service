// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/exchange/price_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/exchange/price_service.go -destination=internal/service/exchange/mock/price_service_mock.go
//

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	sdk "exchange-service/internal/sdk"
	exchange "exchange-service/internal/service/exchange"
	reflect "reflect"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockPriceService is a mock of PriceService interface.
type MockPriceService struct {
	ctrl     *gomock.Controller
	recorder *MockPriceServiceMockRecorder
}

// MockPriceServiceMockRecorder is the mock recorder for MockPriceService.
type MockPriceServiceMockRecorder struct {
	mock *MockPriceService
}

// NewMockPriceService creates a new mock instance.
func NewMockPriceService(ctrl *gomock.Controller) *MockPriceService {
	mock := &MockPriceService{ctrl: ctrl}
	mock.recorder = &MockPriceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceService) EXPECT() *MockPriceServiceMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockPriceService) GetPrice(exchange sdk.ExchangeAPIClient, pairId int64, request exchange.PriceCheckRequest) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", exchange, pairId, request)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockPriceServiceMockRecorder) GetPrice(exchange, pairId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockPriceService)(nil).GetPrice), exchange, pairId, request)
}
