// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sdk/exchange_sdk.go
//
// Generated by this command:
//
//	mockgen -source=internal/sdk/exchange_sdk.go -destination=internal/sdk/mock/exchange_sdk_mock.go
//

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	model "exchange-service/internal/model"
	sdk "exchange-service/internal/sdk"
	reflect "reflect"
	time "time"

	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeSDK is a mock of ExchangeSDK interface.
type MockExchangeSDK struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeSDKMockRecorder
}

// MockExchangeSDKMockRecorder is the mock recorder for MockExchangeSDK.
type MockExchangeSDKMockRecorder struct {
	mock *MockExchangeSDK
}

// NewMockExchangeSDK creates a new mock instance.
func NewMockExchangeSDK(ctrl *gomock.Controller) *MockExchangeSDK {
	mock := &MockExchangeSDK{ctrl: ctrl}
	mock.recorder = &MockExchangeSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeSDK) EXPECT() *MockExchangeSDKMockRecorder {
	return m.recorder
}

// Currencies mocks base method.
func (m *MockExchangeSDK) Currencies() ([]model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Currencies")
	ret0, _ := ret[0].([]model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Currencies indicates an expected call of Currencies.
func (mr *MockExchangeSDKMockRecorder) Currencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Currencies", reflect.TypeOf((*MockExchangeSDK)(nil).Currencies))
}

// GetExchange mocks base method.
func (m *MockExchangeSDK) GetExchange() model.Exchange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange")
	ret0, _ := ret[0].(model.Exchange)
	return ret0
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockExchangeSDKMockRecorder) GetExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockExchangeSDK)(nil).GetExchange))
}

// HistoricPrice mocks base method.
func (m *MockExchangeSDK) HistoricPrice(pair model.Pair, time time.Time) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoricPrice", pair, time)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoricPrice indicates an expected call of HistoricPrice.
func (mr *MockExchangeSDKMockRecorder) HistoricPrice(pair, time any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoricPrice", reflect.TypeOf((*MockExchangeSDK)(nil).HistoricPrice), pair, time)
}

// Pairs mocks base method.
func (m *MockExchangeSDK) Pairs() ([]model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pairs")
	ret0, _ := ret[0].([]model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pairs indicates an expected call of Pairs.
func (mr *MockExchangeSDKMockRecorder) Pairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pairs", reflect.TypeOf((*MockExchangeSDK)(nil).Pairs))
}

// PriceFor mocks base method.
func (m *MockExchangeSDK) PriceFor(pair model.Pair, amount decimal.Decimal, tradeType sdk.TradeType) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PriceFor", pair, amount, tradeType)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PriceFor indicates an expected call of PriceFor.
func (mr *MockExchangeSDKMockRecorder) PriceFor(pair, amount, tradeType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PriceFor", reflect.TypeOf((*MockExchangeSDK)(nil).PriceFor), pair, amount, tradeType)
}

// MockExchangeSDKFactory is a mock of ExchangeSDKFactory interface.
type MockExchangeSDKFactory struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeSDKFactoryMockRecorder
}

// MockExchangeSDKFactoryMockRecorder is the mock recorder for MockExchangeSDKFactory.
type MockExchangeSDKFactoryMockRecorder struct {
	mock *MockExchangeSDKFactory
}

// NewMockExchangeSDKFactory creates a new mock instance.
func NewMockExchangeSDKFactory(ctrl *gomock.Controller) *MockExchangeSDKFactory {
	mock := &MockExchangeSDKFactory{ctrl: ctrl}
	mock.recorder = &MockExchangeSDKFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeSDKFactory) EXPECT() *MockExchangeSDKFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExchangeSDKFactory) Create(exchange model.Exchange) (sdk.ExchangeSDK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exchange)
	ret0, _ := ret[0].(sdk.ExchangeSDK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExchangeSDKFactoryMockRecorder) Create(exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExchangeSDKFactory)(nil).Create), exchange)
}
