// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sdk/wallex.go
//
// Generated by this command:
//
//	mockgen -source=internal/sdk/wallex.go -destination=internal/sdk/mock/wallex_mock.go
//

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	reflect "reflect"
	time "time"

	wallex "github.com/wallexchange/wallex-go"
	gomock "go.uber.org/mock/gomock"
)

// MockWallexClient is a mock of WallexClient interface.
type MockWallexClient struct {
	ctrl     *gomock.Controller
	recorder *MockWallexClientMockRecorder
}

// MockWallexClientMockRecorder is the mock recorder for MockWallexClient.
type MockWallexClientMockRecorder struct {
	mock *MockWallexClient
}

// NewMockWallexClient creates a new mock instance.
func NewMockWallexClient(ctrl *gomock.Controller) *MockWallexClient {
	mock := &MockWallexClient{ctrl: ctrl}
	mock.recorder = &MockWallexClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallexClient) EXPECT() *MockWallexClientMockRecorder {
	return m.recorder
}

// Candles mocks base method.
func (m *MockWallexClient) Candles(symbol, resolution string, from, to time.Time) ([]*wallex.Candle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Candles", symbol, resolution, from, to)
	ret0, _ := ret[0].([]*wallex.Candle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Candles indicates an expected call of Candles.
func (mr *MockWallexClientMockRecorder) Candles(symbol, resolution, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candles", reflect.TypeOf((*MockWallexClient)(nil).Candles), symbol, resolution, from, to)
}

// Currencies mocks base method.
func (m *MockWallexClient) Currencies() ([]*wallex.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Currencies")
	ret0, _ := ret[0].([]*wallex.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Currencies indicates an expected call of Currencies.
func (mr *MockWallexClientMockRecorder) Currencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Currencies", reflect.TypeOf((*MockWallexClient)(nil).Currencies))
}

// MarketOrders mocks base method.
func (m *MockWallexClient) MarketOrders(symbol string) ([]*wallex.MarketOrder, []*wallex.MarketOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketOrders", symbol)
	ret0, _ := ret[0].([]*wallex.MarketOrder)
	ret1, _ := ret[1].([]*wallex.MarketOrder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MarketOrders indicates an expected call of MarketOrders.
func (mr *MockWallexClientMockRecorder) MarketOrders(symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketOrders", reflect.TypeOf((*MockWallexClient)(nil).MarketOrders), symbol)
}

// Markets mocks base method.
func (m *MockWallexClient) Markets() ([]*wallex.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markets")
	ret0, _ := ret[0].([]*wallex.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markets indicates an expected call of Markets.
func (mr *MockWallexClientMockRecorder) Markets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockWallexClient)(nil).Markets))
}
