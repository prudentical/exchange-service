// Code generated by MockGen. DO NOT EDIT.
// Source: internal/persistence/exchange_dao.go
//
// Generated by this command:
//
//	mockgen -source=internal/persistence/exchange_dao.go -destination=internal/persistence/mock/exchange_dao_mock.go
//

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExchangeDAO is a mock of ExchangeDAO interface.
type MockExchangeDAO struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeDAOMockRecorder
}

// MockExchangeDAOMockRecorder is the mock recorder for MockExchangeDAO.
type MockExchangeDAOMockRecorder struct {
	mock *MockExchangeDAO
}

// NewMockExchangeDAO creates a new mock instance.
func NewMockExchangeDAO(ctrl *gomock.Controller) *MockExchangeDAO {
	mock := &MockExchangeDAO{ctrl: ctrl}
	mock.recorder = &MockExchangeDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeDAO) EXPECT() *MockExchangeDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExchangeDAO) Create(exchange model.Exchange) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exchange)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExchangeDAOMockRecorder) Create(exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExchangeDAO)(nil).Create), exchange)
}

// Delete mocks base method.
func (m *MockExchangeDAO) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExchangeDAOMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExchangeDAO)(nil).Delete), id)
}

// FindBy mocks base method.
func (m *MockExchangeDAO) FindBy(field string, value any) ([]model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", field, value)
	ret0, _ := ret[0].([]model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockExchangeDAOMockRecorder) FindBy(field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockExchangeDAO)(nil).FindBy), field, value)
}

// Get mocks base method.
func (m *MockExchangeDAO) Get(id int) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExchangeDAOMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExchangeDAO)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockExchangeDAO) GetAll() ([]model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExchangeDAOMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExchangeDAO)(nil).GetAll))
}

// GetAllWithPage mocks base method.
func (m *MockExchangeDAO) GetAllWithPage(page, size int) (persistence.Page[model.Exchange], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithPage", page, size)
	ret0, _ := ret[0].(persistence.Page[model.Exchange])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithPage indicates an expected call of GetAllWithPage.
func (mr *MockExchangeDAOMockRecorder) GetAllWithPage(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithPage", reflect.TypeOf((*MockExchangeDAO)(nil).GetAllWithPage), page, size)
}

// Update mocks base method.
func (m *MockExchangeDAO) Update(exchange model.Exchange) (model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", exchange)
	ret0, _ := ret[0].(model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExchangeDAOMockRecorder) Update(exchange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExchangeDAO)(nil).Update), exchange)
}
