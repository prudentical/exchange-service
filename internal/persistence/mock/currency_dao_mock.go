// Code generated by MockGen. DO NOT EDIT.
// Source: internal/persistence/currency_dao.go
//
// Generated by this command:
//
//	mockgen -source=internal/persistence/currency_dao.go -destination=internal/persistence/mock/currency_dao_mock.go
//

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCurrencyDAO is a mock of CurrencyDAO interface.
type MockCurrencyDAO struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyDAOMockRecorder
}

// MockCurrencyDAOMockRecorder is the mock recorder for MockCurrencyDAO.
type MockCurrencyDAOMockRecorder struct {
	mock *MockCurrencyDAO
}

// NewMockCurrencyDAO creates a new mock instance.
func NewMockCurrencyDAO(ctrl *gomock.Controller) *MockCurrencyDAO {
	mock := &MockCurrencyDAO{ctrl: ctrl}
	mock.recorder = &MockCurrencyDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyDAO) EXPECT() *MockCurrencyDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrencyDAO) Create(currency model.Currency) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", currency)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyDAOMockRecorder) Create(currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrencyDAO)(nil).Create), currency)
}

// Delete mocks base method.
func (m *MockCurrencyDAO) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCurrencyDAOMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCurrencyDAO)(nil).Delete), id)
}

// FindBy mocks base method.
func (m *MockCurrencyDAO) FindBy(field string, value any) ([]model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", field, value)
	ret0, _ := ret[0].([]model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockCurrencyDAOMockRecorder) FindBy(field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockCurrencyDAO)(nil).FindBy), field, value)
}

// Get mocks base method.
func (m *MockCurrencyDAO) Get(id int) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCurrencyDAOMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurrencyDAO)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockCurrencyDAO) GetAll(page, size int) (persistence.Page[model.Currency], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", page, size)
	ret0, _ := ret[0].(persistence.Page[model.Currency])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCurrencyDAOMockRecorder) GetAll(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCurrencyDAO)(nil).GetAll), page, size)
}

// Update mocks base method.
func (m *MockCurrencyDAO) Update(currency model.Currency) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", currency)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCurrencyDAOMockRecorder) Update(currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCurrencyDAO)(nil).Update), currency)
}
