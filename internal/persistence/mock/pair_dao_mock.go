// Code generated by MockGen. DO NOT EDIT.
// Source: internal/persistence/pair_dao.go
//
// Generated by this command:
//
//	mockgen -source=internal/persistence/pair_dao.go -destination=internal/persistence/mock/pair_dao_mock.go
//

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	model "exchange-service/internal/model"
	persistence "exchange-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPairDAO is a mock of PairDAO interface.
type MockPairDAO struct {
	ctrl     *gomock.Controller
	recorder *MockPairDAOMockRecorder
}

// MockPairDAOMockRecorder is the mock recorder for MockPairDAO.
type MockPairDAOMockRecorder struct {
	mock *MockPairDAO
}

// NewMockPairDAO creates a new mock instance.
func NewMockPairDAO(ctrl *gomock.Controller) *MockPairDAO {
	mock := &MockPairDAO{ctrl: ctrl}
	mock.recorder = &MockPairDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairDAO) EXPECT() *MockPairDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPairDAO) Create(pair model.Pair) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pair)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPairDAOMockRecorder) Create(pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPairDAO)(nil).Create), pair)
}

// Delete mocks base method.
func (m *MockPairDAO) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPairDAOMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPairDAO)(nil).Delete), id)
}

// FindBy mocks base method.
func (m *MockPairDAO) FindBy(field string, value any) ([]model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", field, value)
	ret0, _ := ret[0].([]model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockPairDAOMockRecorder) FindBy(field, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockPairDAO)(nil).FindBy), field, value)
}

// Get mocks base method.
func (m *MockPairDAO) Get(id int) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPairDAOMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPairDAO)(nil).Get), id)
}

// GetByExchangeId mocks base method.
func (m *MockPairDAO) GetByExchangeId(exchangeId, page, size int) (persistence.Page[model.Pair], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExchangeId", exchangeId, page, size)
	ret0, _ := ret[0].(persistence.Page[model.Pair])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExchangeId indicates an expected call of GetByExchangeId.
func (mr *MockPairDAOMockRecorder) GetByExchangeId(exchangeId, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExchangeId", reflect.TypeOf((*MockPairDAO)(nil).GetByExchangeId), exchangeId, page, size)
}

// Update mocks base method.
func (m *MockPairDAO) Update(pair model.Pair) (model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", pair)
	ret0, _ := ret[0].(model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPairDAOMockRecorder) Update(pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPairDAO)(nil).Update), pair)
}
